/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefV3Interface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addPool(uint256,address,bool)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnAddress()": FunctionFragment;
    "burnPercent()": FunctionFragment;
    "collect(tuple)": FunctionFragment;
    "decreaseLiquidity(tuple)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "increaseLiquidity(tuple)": FunctionFragment;
    "lmPoolDeployer()": FunctionFragment;
    "name()": FunctionFragment;
    "nftManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingSkyx(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEmissionRate(uint256)": FunctionFragment;
    "setLmPoolDeployer(address)": FunctionFragment;
    "setNftManager(address)": FunctionFragment;
    "setPercent(uint256)": FunctionFragment;
    "setPool(uint256,uint256,bool)": FunctionFragment;
    "skyx()": FunctionFragment;
    "skyxPerSecond()": FunctionFragment;
    "skyxPerSecondByPool(address)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllPools()": FunctionFragment;
    "updateLiquidity(uint256)": FunctionFragment;
    "updateMultiplePools(uint256[])": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userPositionInfos(uint256)": FunctionFragment;
    "v3PoolAddressPid(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [
      {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lmPoolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingSkyx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLmPoolDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "skyx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "skyxPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "skyxPerSecondByPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositionInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "v3PoolAddressPid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lmPoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSkyx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLmPoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skyx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skyxPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skyxPerSecondByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPositionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v3PoolAddressPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddPool(uint256,address,address)": EventFragment;
    "Deposit(address,uint256,uint256,int24,int24,uint128)": EventFragment;
    "Harvest(address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetEmissionRate(uint256)": EventFragment;
    "SetLmPoolDeployer(address)": EventFragment;
    "SetNftManager(address)": EventFragment;
    "SetPercent(uint256)": EventFragment;
    "SetPool(uint256,uint256)": EventFragment;
    "UpdateLiquidity(address,uint256,uint256,int24,int24,int128)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLmPoolDeployer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MasterChefV3 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefV3Interface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<[string]>;

    "burnAddress()"(overrides?: CallOverrides): Promise<[string]>;

    burnPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "burnPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collect(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collect((uint256,address,uint128,uint128))"(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<[string]>;

    "lmPoolDeployer()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nftManager(overrides?: CallOverrides): Promise<[string]>;

    "nftManager()"(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingSkyx(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    "pendingSkyx(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        allocPoint: BigNumber;
        liquidity: BigNumber;
        lastTime: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        allocPoint: BigNumber;
        liquidity: BigNumber;
        lastTime: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEmissionRate(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmissionRate(uint256)"(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLmPoolDeployer(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLmPoolDeployer(address)"(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftManager(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftManager(address)"(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPercent(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPercent(uint256)"(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    skyx(overrides?: CallOverrides): Promise<[string]>;

    "skyx()"(overrides?: CallOverrides): Promise<[string]>;

    skyxPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    "skyxPerSecond()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    skyxPerSecondByPool(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "skyxPerSecondByPool(address)"(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAllPools(overrides?: Overrides): Promise<ContractTransaction>;

    "updateAllPools()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateLiquidity(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMultiplePools(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMultiplePools(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
        user: string;
        pid: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
      }
    >;

    "userPositionInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
        user: string;
        pid: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
      }
    >;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "v3PoolAddressPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addPool(
    _allocPoint: BigNumberish,
    _v3Pool: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(uint256,address,bool)"(
    _allocPoint: BigNumberish,
    _v3Pool: string,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnAddress(overrides?: CallOverrides): Promise<string>;

  "burnAddress()"(overrides?: CallOverrides): Promise<string>;

  burnPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "burnPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  collect(
    _params: {
      tokenId: BigNumberish;
      recipient: string;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collect((uint256,address,uint128,uint128))"(
    _params: {
      tokenId: BigNumberish;
      recipient: string;
      amount0Max: BigNumberish;
      amount1Max: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    _params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
    _params: {
      tokenId: BigNumberish;
      liquidity: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  harvest(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    _params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
    _params: {
      tokenId: BigNumberish;
      amount0Desired: BigNumberish;
      amount1Desired: BigNumberish;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  lmPoolDeployer(overrides?: CallOverrides): Promise<string>;

  "lmPoolDeployer()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nftManager(overrides?: CallOverrides): Promise<string>;

  "nftManager()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    _from: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    _from: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingSkyx(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingSkyx(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
      v3Pool: string;
      token0: string;
      token1: string;
      fee: number;
      allocPoint: BigNumber;
      liquidity: BigNumber;
      lastTime: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
      v3Pool: string;
      token0: string;
      token1: string;
      fee: number;
      allocPoint: BigNumber;
      liquidity: BigNumber;
      lastTime: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEmissionRate(
    _skyxPerSecond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmissionRate(uint256)"(
    _skyxPerSecond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLmPoolDeployer(
    _lmPoolDeployer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLmPoolDeployer(address)"(
    _lmPoolDeployer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftManager(
    _nftManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftManager(address)"(
    _nftManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPercent(
    _burnPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPercent(uint256)"(
    _burnPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPool(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  skyx(overrides?: CallOverrides): Promise<string>;

  "skyx()"(overrides?: CallOverrides): Promise<string>;

  skyxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  "skyxPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

  skyxPerSecondByPool(
    _v3Pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "skyxPerSecondByPool(address)"(
    _v3Pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAllPools(overrides?: Overrides): Promise<ContractTransaction>;

  "updateAllPools()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateLiquidity(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateLiquidity(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMultiplePools(
    _pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMultiplePools(uint256[])"(
    _pids: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userPositionInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
      user: string;
      pid: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      rewardGrowthInside: BigNumber;
      reward: BigNumber;
    }
  >;

  "userPositionInfos(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
      user: string;
      pid: BigNumber;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      rewardGrowthInside: BigNumber;
      reward: BigNumber;
    }
  >;

  v3PoolAddressPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "v3PoolAddressPid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addPool(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnAddress(overrides?: CallOverrides): Promise<string>;

    "burnAddress()"(overrides?: CallOverrides): Promise<string>;

    burnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "burnPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "collect((uint256,address,uint128,uint128))"(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    lmPoolDeployer(overrides?: CallOverrides): Promise<string>;

    "lmPoolDeployer()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nftManager(overrides?: CallOverrides): Promise<string>;

    "nftManager()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingSkyx(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingSkyx(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        allocPoint: BigNumber;
        liquidity: BigNumber;
        lastTime: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber, BigNumber] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        allocPoint: BigNumber;
        liquidity: BigNumber;
        lastTime: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEmissionRate(
      _skyxPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmissionRate(uint256)"(
      _skyxPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLmPoolDeployer(
      _lmPoolDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLmPoolDeployer(address)"(
      _lmPoolDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftManager(
      _nftManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftManager(address)"(
      _nftManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPercent(
      _burnPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPercent(uint256)"(
      _burnPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    skyx(overrides?: CallOverrides): Promise<string>;

    "skyx()"(overrides?: CallOverrides): Promise<string>;

    skyxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "skyxPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    skyxPerSecondByPool(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "skyxPerSecondByPool(address)"(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPools(overrides?: CallOverrides): Promise<void>;

    "updateAllPools()"(overrides?: CallOverrides): Promise<void>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateLiquidity(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplePools(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMultiplePools(uint256[])"(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
        user: string;
        pid: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
      }
    >;

    "userPositionInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number, BigNumber, BigNumber, BigNumber] & {
        user: string;
        pid: BigNumber;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
      }
    >;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "v3PoolAddressPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AddPool(allocPoint: null, v3Pool: null, lmPool: null): EventFilter;

    Deposit(
      from: string | null,
      pid: BigNumberish | null,
      tokenId: BigNumberish | null,
      tickLower: null,
      tickUpper: null,
      liquidity: null
    ): EventFilter;

    Harvest(
      sender: string | null,
      to: null,
      pid: BigNumberish | null,
      tokenId: BigNumberish | null,
      skyxReward: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetEmissionRate(skyxPerSecond: null): EventFilter;

    SetLmPoolDeployer(lmPoolDeployer: null): EventFilter;

    SetNftManager(nftManager: null): EventFilter;

    SetPercent(burnPercent: null): EventFilter;

    SetPool(pid: BigNumberish | null, allocPoint: null): EventFilter;

    UpdateLiquidity(
      from: string | null,
      pid: BigNumberish | null,
      tokenId: BigNumberish | null,
      tickLower: null,
      tickUpper: null,
      liquidity: null
    ): EventFilter;

    Withdraw(
      sender: string | null,
      to: null,
      pid: BigNumberish | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "burnAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "burnPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collect((uint256,address,uint128,uint128))"(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "lmPoolDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftManager(overrides?: CallOverrides): Promise<BigNumber>;

    "nftManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSkyx(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingSkyx(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEmissionRate(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmissionRate(uint256)"(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLmPoolDeployer(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLmPoolDeployer(address)"(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftManager(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftManager(address)"(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPercent(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPercent(uint256)"(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    skyx(overrides?: CallOverrides): Promise<BigNumber>;

    "skyx()"(overrides?: CallOverrides): Promise<BigNumber>;

    skyxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "skyxPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    skyxPerSecondByPool(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "skyxPerSecondByPool(address)"(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAllPools(overrides?: Overrides): Promise<BigNumber>;

    "updateAllPools()"(overrides?: Overrides): Promise<BigNumber>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateLiquidity(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMultiplePools(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMultiplePools(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPositionInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "v3PoolAddressPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(uint256,address,bool)"(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collect((uint256,address,uint128,uint128))"(
      _params: {
        tokenId: BigNumberish;
        recipient: string;
        amount0Max: BigNumberish;
        amount1Max: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        liquidity: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
      _params: {
        tokenId: BigNumberish;
        amount0Desired: BigNumberish;
        amount1Desired: BigNumberish;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lmPoolDeployer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSkyx(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingSkyx(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEmissionRate(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmissionRate(uint256)"(
      _skyxPerSecond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLmPoolDeployer(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLmPoolDeployer(address)"(
      _lmPoolDeployer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftManager(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftManager(address)"(
      _nftManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPercent(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPercent(uint256)"(
      _burnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    skyx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "skyx()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skyxPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "skyxPerSecond()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skyxPerSecondByPool(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "skyxPerSecondByPool(address)"(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAllPools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateAllPools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateLiquidity(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMultiplePools(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMultiplePools(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPositionInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "v3PoolAddressPid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
