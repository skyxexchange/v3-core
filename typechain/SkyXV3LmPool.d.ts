/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SkyXV3LmPoolInterface extends ethers.utils.Interface {
  functions: {
    "accumulateReward(uint32)": FunctionFragment;
    "crossLmTick(int24,bool)": FunctionFragment;
    "getRewardGrowthInside(int24,int24)": FunctionFragment;
    "lastRewardTimestamp()": FunctionFragment;
    "lmLiquidity()": FunctionFragment;
    "lmTicks(int24)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "negativeRewardGrowthInsideInitValue(int24,int24)": FunctionFragment;
    "pool()": FunctionFragment;
    "rewardGrowthGlobalX128()": FunctionFragment;
    "updatePosition(int24,int24,int128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulateReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossLmTick",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardGrowthInside",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lmLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lmTicks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "negativeRewardGrowthInsideInitValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardGrowthGlobalX128",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossLmTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardGrowthInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lmLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lmTicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "negativeRewardGrowthInsideInitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardGrowthGlobalX128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePosition",
    data: BytesLike
  ): Result;

  events: {};
}

export class SkyXV3LmPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SkyXV3LmPoolInterface;

  functions: {
    accumulateReward(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "accumulateReward(uint32)"(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    crossLmTick(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "crossLmTick(int24,bool)"(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRewardGrowthInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardGrowthInsideX128: BigNumber }>;

    "getRewardGrowthInside(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardGrowthInsideX128: BigNumber }>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<[number]>;

    "lastRewardTimestamp()"(overrides?: CallOverrides): Promise<[number]>;

    lmLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lmLiquidity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lmTicks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        rewardGrowthOutsideX128: BigNumber;
      }
    >;

    "lmTicks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        rewardGrowthOutsideX128: BigNumber;
      }
    >;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    "masterChef()"(overrides?: CallOverrides): Promise<[string]>;

    negativeRewardGrowthInsideInitValue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "negativeRewardGrowthInsideInitValue(int24,int24)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    rewardGrowthGlobalX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardGrowthGlobalX128()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePosition(int24,int24,int128)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accumulateReward(
    currTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "accumulateReward(uint32)"(
    currTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  crossLmTick(
    tick: BigNumberish,
    zeroForOne: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "crossLmTick(int24,bool)"(
    tick: BigNumberish,
    zeroForOne: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRewardGrowthInside(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardGrowthInside(int24,int24)"(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRewardTimestamp(overrides?: CallOverrides): Promise<number>;

  "lastRewardTimestamp()"(overrides?: CallOverrides): Promise<number>;

  lmLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  "lmLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

  lmTicks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      rewardGrowthOutsideX128: BigNumber;
    }
  >;

  "lmTicks(int24)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      rewardGrowthOutsideX128: BigNumber;
    }
  >;

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  negativeRewardGrowthInsideInitValue(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "negativeRewardGrowthInsideInitValue(int24,int24)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  rewardGrowthGlobalX128(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardGrowthGlobalX128()"(overrides?: CallOverrides): Promise<BigNumber>;

  updatePosition(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidityDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePosition(int24,int24,int128)"(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidityDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accumulateReward(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "accumulateReward(uint32)"(
      currTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crossLmTick(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "crossLmTick(int24,bool)"(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardGrowthInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardGrowthInside(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<number>;

    "lastRewardTimestamp()"(overrides?: CallOverrides): Promise<number>;

    lmLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "lmLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    lmTicks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        rewardGrowthOutsideX128: BigNumber;
      }
    >;

    "lmTicks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        rewardGrowthOutsideX128: BigNumber;
      }
    >;

    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    negativeRewardGrowthInsideInitValue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "negativeRewardGrowthInsideInitValue(int24,int24)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    rewardGrowthGlobalX128(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardGrowthGlobalX128()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePosition(int24,int24,int128)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accumulateReward(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "accumulateReward(uint32)"(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    crossLmTick(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "crossLmTick(int24,bool)"(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRewardGrowthInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardGrowthInside(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    lmLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "lmLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    lmTicks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lmTicks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    negativeRewardGrowthInsideInitValue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "negativeRewardGrowthInsideInitValue(int24,int24)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardGrowthGlobalX128(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardGrowthGlobalX128()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePosition(int24,int24,int128)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulateReward(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "accumulateReward(uint32)"(
      currTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    crossLmTick(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "crossLmTick(int24,bool)"(
      tick: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRewardGrowthInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardGrowthInside(int24,int24)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRewardTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lmLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lmLiquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lmTicks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lmTicks(int24)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    negativeRewardGrowthInsideInitValue(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "negativeRewardGrowthInsideInitValue(int24,int24)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardGrowthGlobalX128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardGrowthGlobalX128()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePosition(int24,int24,int128)"(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidityDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
